{"name":"Throttling","body":"Throttling gem provides basic, but very powerful way to throttle various user actions in your application. Basically you can specify how many times some action could be performed over a specified period(s) of time.\r\n\r\n### Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'throttling'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install throttling\r\n\r\n### Configuration\r\n\r\nYou can configure Throttling parameters by accessing attributes of `Throttling` module. Currently it supports only Memcached through `Rails.cache`.\r\n\r\n    Throttling.storage = Rails.cache\r\n    Throttling.logger = Rails.logger\r\n\r\nThrottling limits could be stored in a configuration file in `config/throttling.yml`. You can also specify another file to read limits from:\r\n\r\n    Throttling.limits_config = \"###{Rails.root}/config/throttling.yml\"\r\n\r\nThe basic structure of the file is:\r\n\r\n    user_signup:\r\n      limit: 20\r\n      period: 3600\r\n\r\n    search_requests:\r\n      minutely:\r\n        limit: 300\r\n        period: 600\r\n      hourly:\r\n        limit: 1000\r\n        period: 3600\r\n      daily:\r\n        limit: 10000\r\n        period: 86400\r\n\r\nYou can also specify limits as a Hash:\r\n\r\n    Throttling.limits = {\r\n      :user_signup => {\r\n        :limit  => 20,\r\n        :period => 3600\r\n      },\r\n      :search_requests => {\r\n        :minutely => {\r\n          :limit  => 20,\r\n          :period => 3600\r\n        },\r\n        :hourly => {\r\n          :limit  => 1000,\r\n          :period => 3600\r\n        },\r\n        :daily =>\r\n          :limit  => 10000,\r\n          :period => 86400\r\n        }\r\n      }\r\n    }\r\n\r\nYou can completely disable throttling by setting `enabled` to `false`:\r\n\r\n    Throttling.enabled = false\r\n\r\n### Usage\r\n\r\nThe basic usage of Throttling gem is following:\r\n\r\n    Throttling.for(:user_signup).check(:user_id, current_user.id) do\r\n      ### Do your stuff here\r\n    end\r\n\r\n    if Throttling.for(:user_signup).check(:user_id, current_user.id)\r\n      ### Action allowed\r\n    else\r\n      ### Action denied\r\n    end\r\n\r\nFor convenience, there are some simplified methods:\r\n\r\n    Throttling.for(:user_signup).check_ip(request.remote_ip)\r\n    Throttling.for(:user_signup).check_user_id(current_user.id)\r\n\r\nYou can add more helpers like this:\r\n\r\n    Throttling::Base.class_eval do\r\n      def check_user_id_and_document_id(user_id, doc_id)\r\n        check(\"user_id:doc_id\", \"###{user_id}:###{doc_id}\")\r\n      end\r\n    end\r\n\r\n### Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n### Who are the authors?\r\n\r\nThis plugin has been created in Scribd.com for our internal use and then the sources were opened for other people to use. Most of the code in this package has been developed by Oleksiy Kovyrin and Dmytro Shteflyuk for Scribd.com and is released under the MIT license. For more details, see the LICENSE file.\r\n","tagline":"Easy actions throttling for Ruby applications","google":"UA-1546917-5","note":"Don't delete this file! It's used internally to help with page regeneration."}